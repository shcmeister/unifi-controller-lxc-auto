#!/bin/bash

# ==============================================
# Скрипт за автоматична инсталация на UniFi Controller
# в LXC контейнер на Proxmox VE
# Версия: 3.0
# ==============================================

# --- Конфигурация ---
CTID=$(pvesh get /cluster/nextid)       # Автоматично генериране на ID
HOSTNAME="unifi-${CTID}"               # Име на контейнера
TEMPLATE="debian-12-standard_12.7-1_amd64.tar.zst"  # Шаблон за Debian 12
MEMORY=2048                            # Памет в MB (2GB)
SWAP=512                               # Swap пространство в MB
DISK_SIZE="10G"                        # Размер на диска
CORES=2                                # Брой CPU ядра
MONGO_VERSION="7.0"                    # Версия на MongoDB
UNIFI_VERSION="stable"                 # Версия на UniFi (stable/rc)
TIMEZONE="Europe/Sofia"                # Времева зона

# --- Цветове за output ---
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# --- Функция за логване ---
log() {
    local level=$1
    local message=$2
    local timestamp=$(date +"%Y-%m-%d %H:%M:%S")
    
    case $level in
        "INFO") echo -e "${BLUE}[${timestamp}] INFO: ${message}${NC}" ;;
        "WARN") echo -e "${YELLOW}[${timestamp}] WARN: ${message}${NC}" ;;
        "ERROR") echo -e "${RED}[${timestamp}] ERROR: ${message}${NC}" ;;
        "SUCCESS") echo -e "${GREEN}[${timestamp}] SUCCESS: ${message}${NC}" ;;
        *) echo -e "[${timestamp}] ${message}" ;;
    esac
}

# --- Проверка на средата ---
check_environment() {
    log "INFO" "Проверка на средата..."
    
    if [[ $EUID -ne 0 ]]; then
        log "ERROR" "Този скрипт трябва да се изпълнява като root!"
        exit 1
    fi
    
    if ! command -v pct &> /dev/null; then
        log "ERROR" "Командата 'pct' не е намерена. Този скрипт е предназначен за Proxmox VE!"
        exit 1
    fi
    
    if pct status $CTID &> /dev/null; then
        log "ERROR" "Контейнер с ID $CTID вече съществува!"
        exit 1
    fi
}

# --- Намиране на най-добрия storage ---
find_best_storage() {
    log "INFO" "Анализ на storage устройствата..."
    
    # Първо проверяваме кои storage-и поддържат създаване на контейнери
    local supported_storages=$(pvesm status --enabled --type dir,lvmthin,zfspool 2>/dev/null | awk '
        BEGIN {
            name_col = 0;
            avail_col = 0;
            type_col = 0;
            content_col = 0;
        }
        NR==1 {
            for (i=1; i<=NF; i++) {
                if ($i == "Storage") name_col = i;
                if ($i == "Avail") avail_col = i;
                if ($i == "Type") type_col = i;
                if ($i == "Content") content_col = i;
            }
            next;
        }
        {
            storage = $name_col;
            type = $type_col;
            content = $content_col;
            avail = $avail_col;
            
            # Проверка дали поддържа контейнери
            if (content ~ /rootdir/) {
                # Конвертиране на свободното пространство в мегабайти
                if (avail ~ /T$/) { size = avail * 1024 * 1024; }
                else if (avail ~ /G$/) { size = avail * 1024; }
                else if (avail ~ /M$/) { size = avail; }
                else { size = 0; }
                
                if (size > 0) {
                    print storage, type, size;
                }
            }
        }
    ' | sort -k3 -nr)
    
    if [ -z "$supported_storages" ]; then
        log "ERROR" "Не са намерени подходящи storage устройства!"
        log "ERROR" "Моля, проверете дали имате поне един storage от тип:"
        log "ERROR" " - dir (директория)"
        log "ERROR" " - lvmthin (LVM thin pool)"
        log "ERROR" " - zfspool (ZFS pool)"
        log "ERROR" "който поддържа създаване на контейнери и има достатъчно свободно място."
        exit 1
    fi
    
    # Избираме първия storage (с най-много свободно място)
    local best_storage=$(echo "$supported_storages" | head -n1 | awk '{print $1}')
    local best_storage_type=$(echo "$supported_storages" | head -n1 | awk '{print $2}')
    local best_storage_size=$(echo "$supported_storages" | head -n1 | awk '{print $3}')
    
    log "INFO" "Намерен storage: $best_storage (Тип: $best_storage_type, Свободно: $best_storage_size MB)"
    echo "$best_storage"
}

# --- Създаване на LXC контейнер ---
create_container() {
    local storage=$1
    log "INFO" "Подготвяне за създаване на контейнер..."
    
    # Проверка за шаблона
    if ! pveam list $storage | grep -q "$TEMPLATE"; then
        log "INFO" "Сваляне на шаблон $TEMPLATE..."
        pveam download $storage $TEMPLATE || {
            log "ERROR" "Неуспешно сваляне на шаблон!";
            exit 1;
        }
    fi

    # Генериране на парола
    local root_pass=$(openssl rand -base64 12)
    log "INFO" "Генерирана root парола: $root_pass"
    
    # Създаване на контейнера
    log "INFO" "Създаване на контейнер $CTID на storage $storage..."
    pct create $CTID "$storage:vztmpl/$TEMPLATE" \
        --storage $storage \
        --hostname $HOSTNAME \
        --memory $MEMORY \
        --swap $SWAP \
        --cores $CORES \
        --rootfs "$storage:$DISK_SIZE" \
        --net0 name=eth0,bridge=vmbr0,ip=dhcp \
        --unprivileged 1 \
        --onboot 1 \
        --password "$root_pass" \
        --features nesting=1 \
        --timezone $TIMEZONE || {
            log "ERROR" "Неуспешно създаване на контейнер!";
            exit 1;
        }
    
    log "SUCCESS" "Контейнерът е създаден успешно!"
}

# --- Стартиране и конфигуриране на контейнера ---
setup_container() {
    log "INFO" "Стартиране на контейнер $CTID..."
    pct start $CTID || {
        log "ERROR" "Неуспешно стартиране на контейнер!";
        exit 1;
    }
    
    # Изчакване за IP адрес
    log "INFO" "Изчакване за IP адрес (до 30 секунди)..."
    local ip=""
    for i in {1..10}; do
        ip=$(pct exec $CTID ip -4 -o addr show eth0 | awk '{print $4}' | cut -d'/' -f1)
        [ -n "$ip" ] && break
        sleep 3
    done
    
    if [ -z "$ip" ]; then
        log "ERROR" "Контейнерът не получи IP адрес!"
        exit 1
    fi
    
    log "SUCCESS" "Контейнерът получи IP: $ip"
    
    # Инсталация на UniFi Controller
    log "INFO" "Започва инсталация на UniFi Controller..."
    pct exec $CTID -- bash -c '
        set -e
        
        # Функция за логване вътре в контейнера
        log() {
            echo "[$(date "+%Y-%m-%d %H:%M:%S")] $1"
        }
        
        log "Актуализиране на пакетните списъци..."
        apt-get update -q
        
        log "Инсталиране на необходими пакети..."
        DEBIAN_FRONTEND=noninteractive apt-get install -yq \
            curl gnupg2 apt-transport-https wget lsb-release ca-certificates ufw
        
        log "Добавяне на хранилища..."
        # MongoDB
        wget -qO - https://www.mongodb.org/static/pgp/server-'$MONGO_VERSION'.asc | gpg --dearmor > /etc/apt/trusted.gpg.d/mongodb.gpg
        echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu $(lsb_release -sc)/mongodb-org/'$MONGO_VERSION' multiverse" > /etc/apt/sources.list.d/mongodb-org.list
        
        # UniFi
        wget -qO - https://dl.ui.com/unifi/unifi-repo.gpg | gpg --dearmor > /etc/apt/trusted.gpg.d/unifi-repo.gpg
        echo "deb [arch=amd64] https://dl.ui.com/unifi/debian '$UNIFI_VERSION' ubiquiti" > /etc/apt/sources.list.d/unifi.list
        
        log "Актуализиране на пакетните списъци..."
        apt-get update -q
        
        log "Инсталиране на Java..."
        apt-get install -yq openjdk-17-jre-headless
        
        log "Инсталиране на UniFi Controller..."
        apt-get install -yq unifi
        
        log "Конфигуриране на защитната стена..."
        ufw allow 8080/tcp    # Управление на устройства
        ufw allow 8443/tcp    # Управляващ интерфейс
        ufw allow 3478/udp    # STUN
        ufw allow 10001/udp   # AP discovery
        ufw --force enable
        
        log "Оптимизиране на системата..."
        systemctl stop unifi
        echo -e "\
* soft nofile 8192\n\
* hard nofile 8192\n\
* soft nproc 8192\n\
* hard nproc 8192" >> /etc/security/limits.conf
        
        log "Почистване на системата..."
        apt-get autoremove -yq
        apt-get clean
        rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*
        
        log "Стартиране на услугата UniFi..."
        systemctl start unifi
    ' || {
        log "ERROR" "Грешка при инсталацията в контейнера!";
        exit 1;
    }
    
    log "SUCCESS" "Инсталацията завърши успешно!"
}

# --- Главна функция ---
main() {
    clear
    echo -e "${GREEN}"
    echo "=============================================="
    echo " Автоматична инсталация на UniFi Controller"
    echo " в LXC контейнер на Proxmox VE"
    echo "=============================================="
    echo -e "${NC}"
    
    check_environment
    
    local storage=$(find_best_storage)
    
    create_container "$storage"
    setup_container
    
    local ip=$(pct exec $CTID ip -4 -o addr show eth0 | awk '{print $4}' | cut -d'/' -f1)
    local root_pass=$(pct config $CTID | grep '^rootfs' | awk -F'password=' '{print $2}' | cut -d',' -f1)
    
    echo -e "${GREEN}"
    echo "=============================================="
    echo " ИНСТАЛАЦИЯТА ЗАВЪРШИ УСПЕШНО!"
    echo "=============================================="
    echo -e "${NC}"
    echo -e " ${BLUE}●${NC} Контейнер ID: ${YELLOW}$CTID${NC}"
    echo -e " ${BLUE}●${NC} Име на контейнер: ${YELLOW}$HOSTNAME${NC}"
    echo -e " ${BLUE}●${NC} Storage: ${YELLOW}$storage${NC}"
    echo -e " ${BLUE}●${NC} IP адрес: ${YELLOW}$ip${NC}"
    echo -e " ${BLUE}●${NC} UniFi интерфейс: ${YELLOW}https://$ip:8443${NC}"
    echo -e " ${BLUE}●${NC} Root парола: ${YELLOW}$root_pass${NC}"
    echo -e "${GREEN}"
    echo " Забележка: Може да отнеме 2-3 минути, докато"
    echo " UniFi услугата напълно се инициализира."
    echo "=============================================="
    echo -e "${NC}"
}

# Стартиране на главната функция
main
