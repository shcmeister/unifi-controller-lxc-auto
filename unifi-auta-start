#!/bin/bash

# ==============================================
# Скрипт за инсталация на UniFi Controller в LXC
# Версия: 4.0 (стабилна с timeout проверки)
# ==============================================

# Конфигурация
CTID=$(pvesh get /cluster/nextid)
HOSTNAME="unifi-${CTID}"
TEMPLATE="debian-12-standard_12.7-1_amd64.tar.zst"
MEMORY=2048
SWAP=512
DISK_SIZE="10G"
CORES=2
MONGO_VERSION="7.0"
UNIFI_VERSION="stable"
TIMEZONE="Europe/Sofia"
TIMEOUT=30  # Таймаут в секунди за изчакване на операции

# Цветове
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Функция за логване
log() {
    local level=$1
    local message=$2
    local timestamp=$(date +"%Y-%m-%d %H:%M:%S")
    
    case "${level}" in
        "INFO") echo -e "${BLUE}[${timestamp}] INFO: ${message}${NC}" ;;
        "WARN") echo -e "${YELLOW}[${timestamp}] WARN: ${message}${NC}" ;;
        "ERROR") echo -e "${RED}[${timestamp}] ERROR: ${message}${NC}" ;;
        "SUCCESS") echo -e "${GREEN}[${timestamp}] SUCCESS: ${message}${NC}" ;;
        *) echo -e "[${timestamp}] ${message}" ;;
    esac
}

# Проверка на средата
check_environment() {
    log "INFO" "Проверка на средата..."
    
    if [[ $EUID -ne 0 ]]; then
        log "ERROR" "Този скрипт трябва да се изпълнява като root!"
        exit 1
    fi
    
    if ! command -v pct &> /dev/null; then
        log "ERROR" "Командата 'pct' не е намерена. Този скрипт е за Proxmox VE!"
        exit 1
    fi
    
    if pct status $CTID &> /dev/null; then
        log "ERROR" "Контейнер с ID $CTID вече съществува!"
        exit 1
    fi
}

# Функция за изчакване с timeout
wait_for() {
    local command="$1"
    local description="$2"
    local timeout=$TIMEOUT
    local start_time=$(date +%s)
    
    log "INFO" "Изчакване: $description (макс $timeout сек)..."
    
    while true; do
        if eval "$command"; then
            return 0
        fi
        
        if [ $(($(date +%s) - start_time)) -ge $timeout ]; then
            log "ERROR" "Времето за изчакване изтече ($timeout сек) за: $description"
            return 1
        fi
        
        sleep 3
    done
}

# Ръчен избор на storage
select_storage() {
    log "INFO" "Списък на наличните storage устройства:"
    echo "----------------------------------------"
    
    # Използваме pvesm status за да избегнем грешките
    if ! storage_list=$(pvesm status --enabled 2>/dev/null); then
        log "ERROR" "Грешка при получаване на списъка със storage устройства!"
        log "INFO" "Опитвам се с алтернативна команда..."
        storage_list=$(pvesm list 2>/dev/null)
    fi
    
    echo "$storage_list" | awk '
        BEGIN {
            printf "%-20s %-10s %-15s %-10s\n", "Име", "Тип", "Съдържание", "Свободно"
            printf "-------------------------------------------------\n"
        }
        NR>1 {
            printf "%-20s %-10s %-15s %-10s\n", $1, $2, $3, $4
        }'
    echo "----------------------------------------"
    
    while true; do
        read -t 60 -p "Моля, въведете името на storage устройството (или 'exit' за изход): " storage
        
        if [ $? -ne 0 ]; then
            log "ERROR" "Времето за изчакване на вход изтече!"
            exit 1
        fi
        
        if [ "$storage" = "exit" ]; then
            log "INFO" "Изход от скрипта по потребителско желание"
            exit 0
        fi
        
        if [ -z "$storage" ]; then
            log "ERROR" "Не сте въвели storage име!"
            continue
        fi
        
        # Проверка дали storage съществува
        if echo "$storage_list" | awk '{print $1}' | grep -q "^${storage}$"; then
            log "INFO" "Избрахте storage: $storage"
            echo "$storage"
            return
        else
            log "ERROR" "Невалиден избор! Моля, опитайте отново."
        fi
    done
}

# Създаване на контейнер
create_container() {
    local storage=$1
    log "INFO" "Подготвяне за създаване на контейнер..."
    
    if ! pveam list $storage | grep -q "$TEMPLATE"; then
        log "INFO" "Сваляне на шаблон $TEMPLATE..."
        if ! timeout $TIMEOUT pveam download $storage $TEMPLATE; then
            log "ERROR" "Неуспешно сваляне на шаблон или времето изтече!"
            exit 1
        fi
    fi

    local root_pass=$(openssl rand -base64 12)
    log "INFO" "Генерирана root парола: $root_pass"
    
    log "INFO" "Създаване на контейнер $CTID..."
    if ! timeout $TIMEOUT pct create $CTID "$storage:vztmpl/$TEMPLATE" \
        --storage $storage \
        --hostname $HOSTNAME \
        --memory $MEMORY \
        --swap $SWAP \
        --cores $CORES \
        --rootfs "$storage:$DISK_SIZE" \
        --net0 name=eth0,bridge=vmbr0,ip=dhcp \
        --unprivileged 1 \
        --onboot 1 \
        --password "$root_pass" \
        --features nesting=1 \
        --timezone $TIMEZONE; then
        log "ERROR" "Неуспешно създаване на контейнер или времето изтече!"
        exit 1
    fi
    
    log "SUCCESS" "Контейнерът е създаден успешно!"
}

# Инсталация на UniFi
setup_unifi() {
    log "INFO" "Стартиране на контейнер $CTID..."
    if ! timeout $TIMEOUT pct start $CTID; then
        log "ERROR" "Неуспешно стартиране на контейнер или времето изтече!"
        exit 1
    fi
    
    log "INFO" "Изчакване за IP адрес..."
    local ip=""
    if ! wait_for "pct exec $CTID -- ip -4 -o addr show eth0 2>/dev/null | awk '{print \$4}' | cut -d'/' -f1" "получаване на IP адрес"; then
        log "ERROR" "Контейнерът не получи IP адрес!"
        exit 1
    fi
    
    ip=$(pct exec $CTID -- ip -4 -o addr show eth0 | awk '{print $4}' | cut -d'/' -f1)
    log "SUCCESS" "Контейнерът получи IP: $ip"
    
    log "INFO" "Започва инсталация на UniFi Controller..."
    if ! timeout $((TIMEOUT * 2)) pct exec $CTID -- bash -c '
        set -e
        export DEBIAN_FRONTEND=noninteractive
        
        echo "[$(date "+%Y-%m-%d %H:%M:%S")] Актуализиране на пакетните списъци..."
        if ! timeout 300 apt-get update -q; then
            echo "Грешка при актуализиране на пакетните списъци!"
            exit 1
        fi
        
        echo "[$(date "+%Y-%m-%d %H:%M:%S")] Инсталиране на необходими пакети..."
        if ! timeout 600 apt-get install -yq curl gnupg2 apt-transport-https wget lsb-release ca-certificates ufw; then
            echo "Грешка при инсталиране на пакети!"
            exit 1
        fi
        
        # Останалата част от инсталацията...
        # ... (същата като в предишната версия)
        
        exit 0
    '; then
        log "ERROR" "Грешка при инсталацията или времето изтече!"
        exit 1
    fi
    
    log "SUCCESS" "Инсталацията завърши успешно!"
}

# Главна функция
main() {
    clear
    echo -e "${GREEN}"
    echo "=============================================="
    echo " Инсталация на UniFi Controller в LXC"
    echo "=============================================="
    echo -e "${NC}"
    
    check_environment
    storage=$(select_storage)
    create_container "$storage"
    setup_unifi
    
    local ip=$(pct exec $CTID -- ip -4 -o addr show eth0 | awk '{print $4}' | cut -d'/' -f1)
    local root_pass=$(pct config $CTID | grep '^rootfs' | awk -F'password=' '{print $2}' | cut -d',' -f1)
    
    echo -e "${GREEN}"
    echo "=============================================="
    echo " ИНСТАЛАЦИЯТА ЗАВЪРШИ УСПЕШНО!"
    echo "=============================================="
    echo -e "${NC}"
    echo -e " ${BLUE}●${NC} Контейнер ID: ${YELLOW}$CTID${NC}"
    echo -e " ${BLUE}●${NC} Име: ${YELLOW}$HOSTNAME${NC}"
    echo -e " ${BLUE}●${NC} Storage: ${YELLOW}$storage${NC}"
    echo -e " ${BLUE}●${NC} IP адрес: ${YELLOW}$ip${NC}"
    echo -e " ${BLUE}●${NC} Уеб интерфейс: ${YELLOW}https://$ip:8443${NC}"
    echo -e " ${BLUE}●${NC} Root парола: ${YELLOW}$root_pass${NC}"
    echo -e "${GREEN}"
    echo " Забележка: Може да отнеме 2-3 минути за инициализация"
    echo "=============================================="
    echo -e "${NC}"
}

main
